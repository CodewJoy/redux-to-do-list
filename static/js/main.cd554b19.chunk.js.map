{"version":3,"sources":["actions/index.js","reducers/index.js","store/index.js","components/TodoHeader.js","components/List.js","components/TaskFilter.js","App.js","serviceWorker.js","index.js"],"names":["ViewFilters","changeTodoText","text","type","addTodo","toggleTodo","id","deleteTodo","setViewFilter","filter","SHOW_ALL","todoApp","combineReducers","status","state","action","todoText","todos","addState","concat","deleteState","JSON","parse","stringify","i","length","splice","toggleState","isCompleted","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","TodoHeader","handleChange","event","target","value","dispatch","handleSubmit","preventDefault","getState","todoItem","String","Date","now","content","this","props","onSubmit","onChange","placeholder","Component","Label","styled","label","Div","div","List","handleClick","clicktoClose","newTodo","push","map","key","checked","onClick","SHOW_COMPLETED","SHOW_ACTIVE","TaskFilter","App","handleStoreChange","newState","setState","subscribe","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd554b19.chunk.js","sourcesContent":["/*\n * action type\n */\nexport const CHANGE_TODO_TEXT = 'CHANGE_TODO_TEXT'\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\nexport const SET_VIEW_FILTER= 'SET_VIEW_FILTER'\n\nexport const ViewFilters = {\n    SHOW_ALL: 'all',\n    SHOW_COMPLETED: 'isCompleted',\n    SHOW_ACTIVE: 'active'\n}\n\n/*\n * action creator\n */\n\nexport function changeTodoText(text) {\n  return { type: CHANGE_TODO_TEXT, text }\n}\n\nexport function addTodo(text) {\n  return { type: ADD_TODO, text }\n}\n\nexport function toggleTodo(id) {\n  return { type: TOGGLE_TODO, id }\n}\n\nexport function deleteTodo(id) {\n  return { type: DELETE_TODO, id }\n}\n\nexport function setViewFilter(filter) {\n  return { type: SET_VIEW_FILTER, filter }\n}","import { combineReducers } from 'redux'\nimport { CHANGE_TODO_TEXT, ADD_TODO, TOGGLE_TODO, DELETE_TODO, SET_VIEW_FILTER, ViewFilters } from '../actions'\nconst { SHOW_ALL } = ViewFilters\n\nfunction status(state = SHOW_ALL, action) {\n  switch (action.type) {\n    case SET_VIEW_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nfunction todoText(state = \"\", action) {\n  switch (action.type) {\n    case CHANGE_TODO_TEXT:\n      return action.text\n    default:\n      return state\n  }\n}\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      let addState = state.concat(action.text);\n      return addState\n    case DELETE_TODO:\n      let deleteState = JSON.parse(JSON.stringify(state));\n      for (let i = 0; i < deleteState.length; i++) {\n        if (deleteState[i].id === action.id) {\n          deleteState.splice(i, 1);\n        }\n      }\n      return deleteState\n    case TOGGLE_TODO:\n      let toggleState = JSON.parse(JSON.stringify(state));\n      for (let i = 0; i < toggleState.length; i++) {\n        if (toggleState[i].id === action.id) {\n          toggleState[i].isCompleted = !state[i].isCompleted;\n        }\n      }\n      return toggleState\n    default:\n      return state\n  }\n}\n\nconst todoApp = combineReducers({\n  status,\n  todoText,\n  todos\n})\n\nexport default todoApp","import { createStore } from 'redux'\nimport todoApp from '../reducers'\n\nlet store = createStore(todoApp, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store","import React, { Component } from \"react\";\nimport store from '../store';\nimport { changeTodoText, addTodo } from \"../actions\";\n\nclass TodoHeader extends Component {\n    handleChange = (event) => {\n        let todoText = event.target.value;\n        store.dispatch(changeTodoText(todoText))\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        let todoText = store.getState().todoText;\n        let todoItem = {\n            isCompleted: false,\n            id: String(Date.now()),\n            content: todoText\n        }\n        if (todoText.length === 0) {\n            return\n        }\n        store.dispatch(addTodo(todoItem));\n        store.dispatch(changeTodoText(\"\"));\n    }\n    render() {\n        const { todoText } = this.props;\n        return (\n            <>\n                <h1> todolist </h1>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"text\"\n                        value={todoText}\n                        onChange={this.handleChange}\n                        placeholder=\"Key in your tasks...\"\n                    />\n                </form>\n                <hr />\n            </>\n        )\n    }\n}\n\nexport default TodoHeader;","import React, { Component } from \"react\";\nimport styled from 'styled-components';\nimport store from '../store';\nimport { deleteTodo, toggleTodo } from \"../actions\";\n\nconst Label = styled.label`\n    display: flex;\n    flex-direction: row;\n    padding: 10px 0;\n    align-items: center;\n    justify-content: space-between;\n    width: 500px;\n`;\nconst Div = styled.div`\n    max-width: 450px;\n`;\n\nclass List extends Component {\n    handleClick = (event) => {\n        let id = event.target.id;\n        store.dispatch(toggleTodo(id))\n\n    }\n    clicktoClose = (event) => {\n        let id = event.target.id;\n        store.dispatch(deleteTodo(id))\n    }\n    render() {\n        const { todos, status } = this.props;\n        let newTodo = []\n        if (status === 'isCompleted') {\n            for (let i = 0; i < todos.length; i++) {\n                if (todos[i].isCompleted === true) {\n                    newTodo.push(todos[i])\n                }\n            }\n        } else if (status === 'active') {\n            for (let i = 0; i < todos.length; i++) {\n                if (todos[i].isCompleted === false) {\n                    newTodo.push(todos[i])\n                }\n            }\n        } else {\n            newTodo = todos\n        }\n        return (\n            <div>\n                {newTodo.map(newTodo => (\n                    <Label key={newTodo.id}>\n                        <input\n                            type=\"checkbox\"\n                            checked={newTodo.isCompleted}\n                            id={newTodo.id}\n                            onChange={this.handleClick}\n                        />\n                        <Div>{newTodo.content}</Div>\n                        <button onClick={this.clicktoClose} id={newTodo.id}>\n                            Delete\n                        </button>\n                    </Label>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default List;","import React from \"react\";\nimport { setViewFilter, ViewFilters } from '../actions';\nimport store from '../store';\nconst { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } = ViewFilters\n\n// Stateless Component)\nconst TaskFilter = () => {\n    return (\n        <div>\n            <button onClick={() => { store.dispatch(setViewFilter(SHOW_ALL)) }}>All</button>\n            <button onClick={() => { store.dispatch(setViewFilter(SHOW_ACTIVE)) }}>Active</button>\n            <button onClick={() => { store.dispatch(setViewFilter(SHOW_COMPLETED)) }}>Completed</button>\n        </div>\n    )\n}\n\nexport default TaskFilter;","import React, { Component } from \"react\";\nimport TodoHeader from \"./components/TodoHeader.js\";\nimport List from \"./components/List.js\";\nimport TaskFilter from \"./components/TaskFilter.js\";\nimport store from './store';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = store.getState();\n    }\n    componentDidMount() {\n        store.subscribe(this.handleStoreChange);\n    }\n    handleStoreChange = () => {\n        let newState = store.getState();\n        this.setState(newState);\n    }\n    render() {\n        const { todoText, todos, status } = this.state;\n        return (\n            <div className=\"main\">\n                <TodoHeader \n                    todoText={todoText}\n                />\n                <List\n                    todos={todos}\n                    status={status}\n                />\n                <TaskFilter\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import { Provider } from 'react-redux'\n// import store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />\n    {/* </Provider> */}\n  </React.StrictMode>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}